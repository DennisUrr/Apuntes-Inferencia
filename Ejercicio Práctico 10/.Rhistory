muestra.casadas <- filter(muestra, muestra$ecivil %in% c("Casado(a)"), muestra$sexo %in% c("Mujer"))
cant.hijos.casadas <- muestra.casadas$s4
prueba.shapiro <- shapiro.test(muestra)
cant.hijos.casadas
cant.hijos.casadas <- muestra.casadas$s4
shapiro.solteras <- shapiro.test(cant.hijos.solteras)
shapiro.casadas <- shapiro.test(cant.hijos.casadas)
print(shapiro.solteras)
print(shapiro.casadas)
largo.hijos.soltera <- length(cant.hijos.solteras)
largo.hijos.casadas <- length(cant.hijos.casadas)
largo.hijos.soltera
largo.hijos.casadas
largo.hijos.casadas <- length(cant.hijos.casadas)
mujer.ecivil <- c(rep("Mujeres Solteras", largo.hijos.soltera), rep("Mujeres Casadas", largo.hijos.casadas))
mujer.ecivil
cantidad.hijos <- c(cant.hijos.solteras, cant.hijos.casadas)
datos1 <- data.frame(mujer.ecivil, cantidad.hijos)
datos1
media_solteras <- mean(cant.hijos.solteras)
media_casadas <- mean(cant.hijos.casadas)
distribución.bootstrap <- two.boot(cant.hijos.solteras,
cant.hijos.casadas,
FUN = mean,
R = B)
#Se importan librerias a utilizar
library(ggpubr)
library(ggplot2)
library(ez)
library(dplyr)
library(boot)
library(bootES)
library (simpleboot)
# Indicar directorio donde se ecuentra el archivo
dir <- "C:/Users/Dennis/Documents/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/Datos-Casen-v2.csv"
# Lectura del archivo que contiene los datos
poblacion <- read.csv2(dir, encoding = 'UTF-8')
################################################################################
# SE FIJA EL SEED PARA TOMAR UNA MUESTRA ALEATORIA
semilla <- 350
set.seed(semilla)
# SE CALCULA EL TAMANO DE LA POBLACION Y SE DEFINE EL TAMANO DE LA MUESTRA
tam.poblacion <- nrow(poblacion)
tam.muestra <- 300
# Se obtiene una muestra de 300 datos utilizando la semilla.
muestra <- poblacion[sample(1:tam.poblacion, tam.muestra),]
muestra.solteras <- filter(muestra, muestra$ecivil %in% c("Soltero(a)"), muestra$sexo %in% c("Mujer"))
cant.hijos.solteras <- muestra.solteras$s4
muestra.casadas <- filter(muestra, muestra$ecivil %in% c("Casado(a)"), muestra$sexo %in% c("Mujer"))
cant.hijos.casadas <- muestra.casadas$s4
shapiro.solteras <- shapiro.test(cant.hijos.solteras)
print(shapiro.solteras)
shapiro.casadas <- shapiro.test(cant.hijos.casadas)
print(shapiro.casadas)
largo.hijos.soltera <- length(cant.hijos.solteras)
largo.hijos.casadas <- length(cant.hijos.casadas)
mujer.ecivil <- c(rep("Mujeres Solteras", largo.hijos.soltera), rep("Mujeres Casadas", largo.hijos.casadas))
cantidad.hijos <- c(cant.hijos.solteras, cant.hijos.casadas)
datos1 <- data.frame(mujer.ecivil, cantidad.hijos)
media.solteras <- mean(cant.hijos.solteras)
media.casadas <- mean(cant.hijos.casadas)
diferencia.medias <- media.solteras - media.casadas
alfa <- 0.01
B <- 9999
distribución.bootstrap <- two.boot(cant.hijos.solteras,
cant.hijos.casadas,
FUN = mean,
R = B)
distribución.bootstrap
desplazamiento <- mean(distribución.bootstrap[["t"]]) - valor.nulo
valor.nulo <- 0
desplazamiento <- mean(distribución.bootstrap[["t"]]) - valor.nulo
distribucion_nula <- distribucion_bootstrap [["t"]] - desplazamiento
distribucion.bootstrap <- two.boot(cant.hijos.solteras,
cant.hijos.casadas,
FUN = mean,
R = B)
desplazamiento <- mean(distribución.bootstrap[["t"]]) - valor.nulo
distribucion_nula <- distribucion_bootstrap [["t"]] - desplazamiento
desplazamiento <- mean(distribución.bootstrap[["t"]]) - valor.nulo
distribucion_nula <- distribucion_bootstrap[["t"]] - desplazamiento
desplazamiento <- mean(distribución.bootstrap[["t"]]) - valor.nulo
distribucion_nula <- distribucion.bootstrap[["t"]] - desplazamiento
p <- (sum(abs(distribucion_nula) > abs(diferencia.medias)) + 1)/(B + 1)
cat ( " Valor p : " , p )
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
View(muestra)
num.personas.situacion1 <- muestra$numper
num.personas.situacion1 <- filter(num.personas.situacion1, num.personas.situacion1$V13 %in% c("Propia pagada"))
num.personas.situacion1 <- filter(muestra, muestra$V13 %in% c("Propia pagada"))
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
num.personas.situacion1 <- filter(muestra, muestra$v13 %in% c("Propia pagada"))
num.personas.situacion1  < num.personas.situacion1$numper
num.personas.situacion1
View(num.personas.situacion1)
num.personas.situacion1 <- filter(muestra, muestra$v13 %in% c("Propia pagada"))
num.personas.situacion1  < num.personas.situacion1$numper
num.personas.situacion1 <- filter(muestra, muestra$v13 %in% c("Propia pagada"))
num.personas.situacion1  < num.personas.situacion1$numper
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
num.personas.situacion1 <- personas.situacion1$numper
num.personas.situacion1
personas.situacion1 <- filter(muestra, muestra$v13 %in% c("Propia pagada"))
num.personas.situacion1 <- personas.situacion1$numper
personas.situacion2 <- filter(muestra, muestra$v13 %in% c("Arrendada con contrato"))
num.personas.situacion2 <- personas.situacion2$numper
personas.situacion3 <- filter(muestra, muestra$v13 %in% c("Arrendada con contrato"))
num.personas.situacion3 <- personas.situacion3$numper
personas.situacion1 <- filter(muestra, muestra$v13 %in% c("Propia pagada"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion1 <- personas.situacion1$numper
personas.situacion2 <- filter(muestra, muestra$v13 %in% c("Arrendada con contrato"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion2 <- personas.situacion2$numper
personas.situacion3 <- filter(muestra, muestra$v13 %in% c("Arrendada con contrato"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion3 <- personas.situacion3$numper
shapiro.situacion1 <- shapiro.test(num.personas.situacion1)
print(shapiro.situacion1)
shapiro.situacion2 <- shapiro.test(num.personas.situacion2)
print(shapiro.situacion2)
shapiro.situacion3 <- shapiro.test(num.personas.situacion3)
print(shapiro.situacion3)
personas.situacion1 <- filter(muestra, muestra$v13 %in% c("Propia pagada"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion1 <- personas.situacion1$numper
personas.situacion2 <- filter(muestra, muestra$v13 %in% c("Arrendada con contrato"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion2 <- personas.situacion2$numper
personas.situacion3 <- filter(muestra, muestra$v13 %in% c("Ocupación irregular"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion3 <- personas.situacion3$numper
shapiro.situacion1 <- shapiro.test(num.personas.situacion1)
print(shapiro.situacion1)
shapiro.situacion2 <- shapiro.test(num.personas.situacion2)
print(shapiro.situacion2)
shapiro.situacion3 <- shapiro.test(num.personas.situacion3)
print(shapiro.situacion3)
View(personas.situacion3)
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
personas.situacion3
num.personas.situacion3
personas.situacion1 <- filter(muestra, muestra$v13 %in% c("Propia pagada"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion1 <- personas.situacion1$numper
personas.situacion2 <- filter(muestra, muestra$v13 %in% c("Arrendada con contrato"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion2 <- personas.situacion2$numper
personas.situacion3 <- filter(muestra, muestra$v13 %in% c("Cedida por familiar u otro"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion3 <- personas.situacion3$numper
shapiro.situacion1 <- shapiro.test(num.personas.situacion1)
print(shapiro.situacion1)
shapiro.situacion2 <- shapiro.test(num.personas.situacion2)
print(shapiro.situacion2)
shapiro.situacion3 <- shapiro.test(num.personas.situacion3)
print(shapiro.situacion3)
media.situacion1 <- mean(num.personas.situacion1)
media.situacion2 <- mean(num.personas.situacion2)
media.situacion3 <- mean(num.personas.situacion3)
diferencia.medias1.2 <- media.situacion1 - media.situacion2
diferencia.medias1.3 <- media.situacion1 - media.situacion3
diferencia.medias2.3 <- media.situacion2 - media.situacion3
B <- 9999
valor.nulo <- 0
distribucion.bootstrap1 <- two.boot(media.situacion1,
media.situacion2,
FUN = mean,
R = B)
desplazamiento1 <- mean(distribucion.bootstrap1[["t"]]) - valor.nulo
distribucion_nula1 <- distribucion.bootstrap1[["t"]] - desplazamiento1
p <- (sum(abs(distribucion_nula1) > abs(diferencia.medias1.2)) + 1)/(B + 1)
cat ( " Valor p : " , p )
distribucion.bootstrap2 <- two.boot(media.situacion1,
media.situacion3,
FUN = mean,
R = B)
desplazamiento2 <- mean(distribucion.bootstrap2[["t"]]) - valor.nulo
distribucion_nula2 <- distribucion.bootstrap2[["t"]] - desplazamiento2
p <- (sum(abs(distribucion_nula2) > abs(diferencia.medias1.3)) + 1)/(B + 1)
cat ( " Valor p : " , p )
distribucion.bootstrap2 <- two.boot(media.situacion2,
media.situacion3,
FUN = mean,
R = B)
desplazamiento3 <- mean(distribucion.bootstrap[["t"]]) - valor.nulo
distribucion_nula3 <- distribucion.bootstrap[["t"]] - desplazamiento3
p <- (sum(abs(distribucion_nula) > abs(diferencia.medias2.3)) + 1)/(B + 1)
cat ( " Valor p : " , p )
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
distribucion.bootstrap1 <- two.boot(media.situacion1,
media.situacion2,
FUN = mean,
R = B)
desplazamiento1 <- mean(distribucion.bootstrap1[["t"]]) - valor.nulo
distribucion_nula1 <- distribucion.bootstrap1[["t"]] - desplazamiento1
p <- (sum(abs(distribucion_nula1) > abs(diferencia.medias1.2)) + 1)/(B + 1)
cat ( " Valor p : " , p )
distribucion.bootstrap2 <- two.boot(media.situacion1,
media.situacion3,
FUN = mean,
R = B)
desplazamiento2 <- mean(distribucion.bootstrap2[["t"]]) - valor.nulo
distribucion_nula2 <- distribucion.bootstrap2[["t"]] - desplazamiento2
p <- (sum(abs(distribucion_nula2) > abs(diferencia.medias1.3)) + 1)/(B + 1)
cat ( " Valor p : " , p )
distribucion.bootstrap3 <- two.boot(media.situacion2,
media.situacion3,
FUN = mean,
R = B)
desplazamiento3 <- mean(distribucion.bootstrap3[["t"]]) - valor.nulo
distribucion_nula3 <- distribucion.bootstrap3[["t"]] - desplazamiento3
p <- (sum(abs(distribucion_nula3) > abs(diferencia.medias2.3)) + 1)/(B + 1)
cat ( " Valor p : " , p )
distribucion.bootstrap1 <- two.boot(media.situacion1,
media.situacion2,
FUN = mean,
R = B)
desplazamiento1 <- mean(distribucion.bootstrap1[["t"]]) - valor.nulo
distribucion_nula1 <- distribucion.bootstrap1[["t"]] - desplazamiento1
p1 <- (sum(abs(distribucion_nula1) > abs(diferencia.medias1.2)) + 1)/(B + 1)
cat ( " Valor p : " , p1 )
distribucion.bootstrap2 <- two.boot(media.situacion1,
media.situacion3,
FUN = mean,
R = B)
desplazamiento2 <- mean(distribucion.bootstrap2[["t"]]) - valor.nulo
distribucion_nula2 <- distribucion.bootstrap2[["t"]] - desplazamiento2
p2 <- (sum(abs(distribucion_nula2) > abs(diferencia.medias1.3)) + 1)/(B + 1)
cat ( " Valor p : " , p2 )
distribucion.bootstrap3 <- two.boot(media.situacion2,
media.situacion3,
FUN = mean,
R = B)
desplazamiento3 <- mean(distribucion.bootstrap3[["t"]]) - valor.nulo
distribucion_nula3 <- distribucion.bootstrap3[["t"]] - desplazamiento3
p3 <- (sum(abs(distribucion_nula3) > abs(diferencia.medias2.3)) + 1)/(B + 1)
cat ( " Valor p : " , p3 )
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
p1-p2
p1-p3
p2-p3
cat("\n Distancias entre valor p1 y p2", abs(p1-p2))
cat("\n Distancias entre valor p1 y p3", abs(p1-p3))
cat("\n Distancias entre valor p2 y p3", abs(p2-p3))
library (simpleboot)
library(WRS2)
install.packages("WRS2")
library (simpleboot)
library(WRS2)
alfa <- 0.05
alfa <- 0.05
# Aplicar prueba de yuen para muestras independientes
# aplicar poda al 20%
gamma  <- 0.2
poda_hijos_solteras <- largo.hijos.soltera * gamma
poda_hijos_casadas <- largo.hijos.casadas * gamma
hijos_solteras_truncada <- cant.hijos.solteras[poda_hijos_solteras:(largo.hijos.soltera - poda_hijos_solteras)]
hijos_casadas_truncada <- cant.hijos.casadas[poda_hijos_casadas:(largo.hijos.casadas - poda_hijos_casadas)]
largo.hijos.soltera <- length(cant.hijos.solteras)
largo.hijos.casadas <- length(cant.hijos.casadas)
alfa <- 0.05
# Aplicar prueba de yuen para muestras independientes
# aplicar poda al 20%
gamma  <- 0.2
poda.hijos.solteras <- largo.hijos.soltera * gamma
poda.hijos.casadas <- largo.hijos.casadas * gamma
hijos.solteras.truncada <- cant.hijos.solteras[poda.hijos.solteras:(largo.hijos.soltera - poda.hijos.solteras)]
hijos.casadas.truncada <- cant.hijos.casadas[poda.hijos.casadas:(largo.hijos.casadas - poda.hijos.casadas)]
mujer.ecivil <- c(rep("Mujeres Solteras", poda.hijos.solteras), rep("Mujeres Casadas", poda.hijos.casadas))
cantidad.hijos <- c(hijos.solteras.truncada, hijos.casadas.truncada)
datos.truncados <- data.frame(mujer.ecivil, cantidad.hijos)
hijos.solteras.truncada
hijos.casadas.truncada
mujer.ecivil
cantidad.hijos
hijos.solteras.truncada <- cant.hijos.solteras[poda.hijos.solteras:(largo.hijos.soltera - poda.hijos.solteras)]
hijos.casadas.truncada <- cant.hijos.casadas[poda.hijos.casadas:(largo.hijos.casadas - poda.hijos.casadas)]
mujer.ecivil <- c(rep("Mujeres Solteras", length(hijos.solteras.truncada)), rep("Mujeres Casadas", length(hijos.casadas.truncada)))
cantidad.hijos <- c(hijos.solteras.truncada, hijos.casadas.truncada)
datos.truncados <- data.frame(mujer.ecivil, cantidad.hijos)
datos.truncados
graficoQQ <- ggqqplot(datos.truncados,
x = "cantidad.hijos",
facet.by = "mujer.ecivil",
palette = c("blue", "red"),
color = "mujer.ecivil")
print(graficoQQ)
#=====================================MÉTODOS ROBUSTOS================================
largo.hijos.soltera <- length(cant.hijos.solteras)
largo.hijos.casadas <- length(cant.hijos.casadas)
mujer.ecivil <- c(rep("Mujeres Solteras", length(cant.hijos.solteras)), rep("Mujeres Casadas", length(cant.hijos.casadas)))
cantidad.hijos <- c(cant.hijos.solteras, cant.hijos.casadas)
#=====================================MÉTODOS ROBUSTOS================================
largo.hijos.soltera <- length(cant.hijos.solteras)
largo.hijos.casadas <- length(cant.hijos.casadas)
mujer.ecivil <- c(rep("Mujeres Solteras", largo.hijos.soltera), rep("Mujeres Casadas", largo.hijos.casadas))
cantidad.hijos <- c(cant.hijos.solteras, cant.hijos.casadas)
data <- data.frame(mujer.ecivil, cantidad.hijos)
datos <- data.frame(mujer.ecivil, cantidad.hijos)
alfa <- 0.05
# Aplicar prueba de yuen para muestras independientes
# aplicar poda al 20%
gamma  <- 0.2
poda.hijos.solteras <- largo.hijos.soltera * gamma
poda.hijos.casadas <- largo.hijos.casadas * gamma
hijos.solteras.truncada <- cant.hijos.solteras[poda.hijos.solteras:(largo.hijos.soltera - poda.hijos.solteras)]
hijos.casadas.truncada <- cant.hijos.casadas[poda.hijos.casadas:(largo.hijos.casadas - poda.hijos.casadas)]
mujer.ecivil <- c(rep("Mujeres Solteras", length(hijos.solteras.truncada)), rep("Mujeres Casadas", length(hijos.casadas.truncada)))
cantidad.hijos <- c(hijos.solteras.truncada, hijos.casadas.truncada)
datos.truncados <- data.frame(mujer.ecivil, cantidad.hijos)
graficoQQ <- ggqqplot(datos.truncados,
x = "cantidad.hijos",
facet.by = "mujer.ecivil",
palette = c("blue", "red"),
color = "mujer.ecivil")
print(graficoQQ)
prueba.yuen <- yuen(cantidad.hijos ~ mujer.ecivil,
data = datos,
tr = gamma)
prueba.yuen
situacion.ocupa <- c(rep("Propia pagada", length(num.personas.situacion1)),
rep("Arrendada con contrato", length(num.personas.situacion2)),
rep("Cedida por familiar u otro", length(num.personas.situacion3)))
cant.hijos.solteras <- order(cant.hijos.solteras,
decreasing = FALSE)
cant.hijos.solteras
cant.hijos.solteras <- order(cant.hijos.solteras,
decreasing = TRUE,
method = "auto")
cant.hijos.solteras
cant.hijos.solteras <- order(cant.hijos.solteras,
decreasing = TRUE,
method = "shell")
cant.hijos.solteras
cant.hijos.solteras <- sort.list(cant.hijos.solteras)
cant.hijos.solteras
cant.hijos.casadas <- order(cant.hijos.casadas)
cant.hijos.casadas
cant.hijos.solteras <- sort(c
cant.hijos.solteras
cant.hijos.solteras <- sort(cant.hijos.solteras)
cant.hijos.solteras
cant.hijos.solteras <- sort.int(cant.hijos.solteras)
muestra.solteras <- filter(muestra, muestra$ecivil %in% c("Soltero(a)"), muestra$sexo %in% c("Mujer"))
cant.hijos.solteras <- muestra.solteras$s4
muestra.casadas <- filter(muestra, muestra$ecivil %in% c("Casado(a)"), muestra$sexo %in% c("Mujer"))
cant.hijos.casadas <- muestra.casadas$s4
cant.hijos.solteras <- sort.int(cant.hijos.solteras)
cant.hijos.solteras
cant.hijos.solteras <- muestra.solteras$s4
cant.hijos.solteras
# Indicar directorio donde se ecuentra el archivo
dir <- "C:/Users/Dennis/Documents/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/Datos-Casen-v2.csv"
# Lectura del archivo que contiene los datos
poblacion <- read.csv2(dir, encoding = 'UTF-8')
################################################################################
# SE FIJA EL SEED PARA TOMAR UNA MUESTRA ALEATORIA
semilla <- 350
set.seed(semilla)
# SE CALCULA EL TAMANO DE LA POBLACION Y SE DEFINE EL TAMANO DE LA MUESTRA
tam.poblacion <- nrow(poblacion)
tam.muestra <- 300
# Se obtiene una muestra de 300 datos utilizando la semilla.
muestra <- poblacion[sample(1:tam.poblacion, tam.muestra),]
muestra.solteras <- filter(muestra, muestra$ecivil %in% c("Soltero(a)"), muestra$sexo %in% c("Mujer"))
cant.hijos.solteras <- muestra.solteras$s4
muestra.casadas <- filter(muestra, muestra$ecivil %in% c("Casado(a)"), muestra$sexo %in% c("Mujer"))
cant.hijos.casadas <- muestra.casadas$s4
alfa <- 0.05
shapiro.solteras <- shapiro.test(cant.hijos.solteras)
print(shapiro.solteras)
shapiro.casadas <- shapiro.test(cant.hijos.casadas)
print(shapiro.casadas)
#=====================================MÉTODOS ROBUSTOS================================
largo.hijos.soltera <- length(cant.hijos.solteras)
largo.hijos.casadas <- length(cant.hijos.casadas)
mujer.ecivil <- c(rep("Mujeres Solteras", largo.hijos.soltera), rep("Mujeres Casadas", largo.hijos.casadas))
cantidad.hijos <- c(cant.hijos.solteras, cant.hijos.casadas)
datos <- data.frame(mujer.ecivil, cantidad.hijos)
alfa <- 0.05
# Aplicar prueba de yuen para muestras independientes
# aplicar poda al 20%
gamma  <- 0.2
poda.hijos.solteras <- largo.hijos.soltera * gamma
poda.hijos.casadas <- largo.hijos.casadas * gamma
cant.hijos.solteras.ordenado <- sort.int(cant.hijos.solteras)
cant.hijos.casadas.ordenado <- sort.int(cant.hijos.casadas)
cant.hijos.solteras
cant.hijos.solteras.ordenado
hijos.solteras.truncada <- cant.hijos.solteras.ordenado[poda.hijos.solteras:(largo.hijos.soltera - poda.hijos.solteras)]
hijos.casadas.truncada <- cant.hijos.casadas.ordenado[poda.hijos.casadas:(largo.hijos.casadas - poda.hijos.casadas)]
mujer.ecivil <- c(rep("Mujeres Solteras", length(hijos.solteras.truncada)), rep("Mujeres Casadas", length(hijos.casadas.truncada)))
cantidad.hijos <- c(hijos.solteras.truncada, hijos.casadas.truncada)
datos.truncados <- data.frame(mujer.ecivil, cantidad.hijos)
graficoQQ <- ggqqplot(datos.truncados,
x = "cantidad.hijos",
facet.by = "mujer.ecivil",
palette = c("blue", "red"),
color = "mujer.ecivil")
print(graficoQQ)
prueba.yuen <- yuen(cantidad.hijos ~ mujer.ecivil,
data = datos,
tr = gamma)
print(prueba.yuen)
#=====================================MÉTODOS ROBUSTOS================================
largo.hijos.soltera <- length(cant.hijos.solteras)
largo.hijos.casadas <- length(cant.hijos.casadas)
mujer.ecivil <- c(rep("Mujeres Solteras", largo.hijos.soltera), rep("Mujeres Casadas", largo.hijos.casadas))
cantidad.hijos <- c(cant.hijos.solteras, cant.hijos.casadas)
datos <- data.frame(mujer.ecivil, cantidad.hijos)
alfa <- 0.05
# Aplicar prueba de yuen para muestras independientes
# aplicar poda al 20%
gamma  <- 0.2
poda.hijos.solteras <- largo.hijos.soltera * gamma
poda.hijos.casadas <- largo.hijos.casadas * gamma
hijos.solteras.truncada <- cant.hijos.solteras[poda.hijos.solteras:(largo.hijos.soltera - poda.hijos.solteras)]
hijos.casadas.truncada <- cant.hijos.casadas[poda.hijos.casadas:(largo.hijos.casadas - poda.hijos.casadas)]
mujer.ecivil <- c(rep("Mujeres Solteras", length(hijos.solteras.truncada)), rep("Mujeres Casadas", length(hijos.casadas.truncada)))
cantidad.hijos <- c(hijos.solteras.truncada, hijos.casadas.truncada)
datos.truncados <- data.frame(mujer.ecivil, cantidad.hijos)
graficoQQ <- ggqqplot(datos.truncados,
x = "cantidad.hijos",
facet.by = "mujer.ecivil",
palette = c("blue", "red"),
color = "mujer.ecivil")
print(graficoQQ)
prueba.yuen <- yuen(cantidad.hijos ~ mujer.ecivil,
data = datos,
tr = gamma)
print(prueba.yuen)
#=====================================MÉTODOS ROBUSTOS================================
largo.hijos.soltera <- length(cant.hijos.solteras)
largo.hijos.casadas <- length(cant.hijos.casadas)
mujer.ecivil <- c(rep("Mujeres Solteras", largo.hijos.soltera), rep("Mujeres Casadas", largo.hijos.casadas))
cantidad.hijos <- c(cant.hijos.solteras, cant.hijos.casadas)
datos <- data.frame(mujer.ecivil, cantidad.hijos)
alfa <- 0.01
# Aplicar prueba de yuen para muestras independientes
# aplicar poda al 20%
gamma  <- 0.2
poda.hijos.solteras <- largo.hijos.soltera * gamma
poda.hijos.casadas <- largo.hijos.casadas * gamma
hijos.solteras.truncada <- cant.hijos.solteras[poda.hijos.solteras:(largo.hijos.soltera - poda.hijos.solteras)]
hijos.casadas.truncada <- cant.hijos.casadas[poda.hijos.casadas:(largo.hijos.casadas - poda.hijos.casadas)]
mujer.ecivil <- c(rep("Mujeres Solteras", length(hijos.solteras.truncada)), rep("Mujeres Casadas", length(hijos.casadas.truncada)))
cantidad.hijos <- c(hijos.solteras.truncada, hijos.casadas.truncada)
datos.truncados <- data.frame(mujer.ecivil, cantidad.hijos)
graficoQQ <- ggqqplot(datos.truncados,
x = "cantidad.hijos",
facet.by = "mujer.ecivil",
palette = c("blue", "red"),
color = "mujer.ecivil")
print(graficoQQ)
prueba.yuen <- yuen(cantidad.hijos ~ mujer.ecivil,
data = datos,
tr = gamma)
print(prueba.yuen)
situacion.ocupa <- c(rep("Propia pagada", length(num.personas.situacion1)),
rep("Arrendada con contrato", length(num.personas.situacion2)),
rep("Cedida por familiar u otro", length(num.personas.situacion3)))
personas.hogar <- c(num.personas.situacion1, num.personas.situacion2, num.personas.situacion3)
personas.situacion1 <- filter(muestra, muestra$v13 %in% c("Propia pagada"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion1 <- personas.situacion1$numper
personas.situacion2 <- filter(muestra, muestra$v13 %in% c("Arrendada con contrato"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion2 <- personas.situacion2$numper
personas.situacion3 <- filter(muestra, muestra$v13 %in% c("Cedida por familiar u otro"), muestra$region %in% c("Región Metropolitana de Santiago"))
num.personas.situacion3 <- personas.situacion3$numper
shapiro.situacion1 <- shapiro.test(num.personas.situacion1)
print(shapiro.situacion1)
shapiro.situacion2 <- shapiro.test(num.personas.situacion2)
print(shapiro.situacion2)
shapiro.situacion3 <- shapiro.test(num.personas.situacion3)
print(shapiro.situacion3)
situacion.ocupa <- c(rep("Propia pagada", length(num.personas.situacion1)),
rep("Arrendada con contrato", length(num.personas.situacion2)),
rep("Cedida por familiar u otro", length(num.personas.situacion3)))
personas.hogar <- c(num.personas.situacion1, num.personas.situacion2, num.personas.situacion3)
datos2 <- data.frame(situacion.ocupa,
personas.hogar)
datos2
alfa <- 0.05
# Comparar los diferentes situaciones de ocupación usando medias truncadas .
cat ( " Comparaci ó n entre grupos usando medias truncadas \ n \ n" )
situacion.ocupa <- c(rep("Propia pagada", length(num.personas.situacion1)),
rep("Arrendada con contrato", length(num.personas.situacion2)),
rep("Cedida por familiar u otro", length(num.personas.situacion3)))
personas.hogar <- c(num.personas.situacion1, num.personas.situacion2, num.personas.situacion3)
datos2 <- data.frame(situacion.ocupa,
personas.hogar)
alfa <- 0.05
# Comparar los diferentes situaciones de ocupación usando medias truncadas .
cat ( " Comparación entre grupos usando medias truncadas \n\n" )
gamma <- 0.2
set.seed (300)
medias.truncadas <- t1waybt(personas.hogar ~ situacion.ocupa,
data = datos ,
tr = gamma ,
alpha = alfa )
# Comparar los diferentes situaciones de ocupación usando medias truncadas .
cat ( " Comparación entre grupos usando bootstrap \n\n" )
muestras <- 999
gamma <- 0.2
set.seed (300)
bootstrap <- t1waybt(personas.hogar ~ situacion.ocupa,
data = datos ,
tr = gamma ,
nboot = muestras)
bootstrap
source('~/Clases/IME/Apuntes-Inferencia/Ejercicio Práctico 10/EjercicioPractico10.r', encoding = 'UTF-8')
